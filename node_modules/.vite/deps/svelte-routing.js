import {
  derived,
  writable
} from "./chunk-DY7FSUYH.js";
import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  assign,
  check_outros,
  component_subscribe,
  compute_rest_props,
  construct_svelte_component_dev,
  createEventDispatcher,
  create_component,
  create_slot,
  destroy_component,
  detach_dev,
  dispatch_dev,
  element,
  empty,
  exclude_internal_props,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  get_spread_object,
  get_spread_update,
  group_outros,
  init,
  insert_dev,
  listen_dev,
  mount_component,
  onDestroy,
  onMount,
  safe_not_equal,
  setContext,
  set_attributes,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots,
  validate_store
} from "./chunk-K6MJRMI7.js";

// node_modules/svelte-routing/src/contexts.js
var LOCATION = {};
var ROUTER = {};

// node_modules/svelte-routing/src/history.js
function getLocation(source) {
  return {
    ...source.location,
    state: source.history.state,
    key: source.history.state && source.history.state.key || "initial"
  };
}
function createHistory(source, options) {
  const listeners = [];
  let location2 = getLocation(source);
  return {
    get location() {
      return location2;
    },
    listen(listener) {
      listeners.push(listener);
      const popstateListener = () => {
        location2 = getLocation(source);
        listener({ location: location2, action: "POP" });
      };
      source.addEventListener("popstate", popstateListener);
      return () => {
        source.removeEventListener("popstate", popstateListener);
        const index = listeners.indexOf(listener);
        listeners.splice(index, 1);
      };
    },
    navigate(to, { state, replace = false } = {}) {
      state = { ...state, key: Date.now() + "" };
      try {
        if (replace) {
          source.history.replaceState(state, null, to);
        } else {
          source.history.pushState(state, null, to);
        }
      } catch (e) {
        source.location[replace ? "replace" : "assign"](to);
      }
      location2 = getLocation(source);
      listeners.forEach((listener) => listener({ location: location2, action: "PUSH" }));
    }
  };
}
function createMemorySource(initialPathname = "/") {
  let index = 0;
  const stack = [{ pathname: initialPathname, search: "" }];
  const states = [];
  return {
    get location() {
      return stack[index];
    },
    addEventListener(name, fn) {
    },
    removeEventListener(name, fn) {
    },
    history: {
      get entries() {
        return stack;
      },
      get index() {
        return index;
      },
      get state() {
        return states[index];
      },
      pushState(state, _, uri) {
        const [pathname, search = ""] = uri.split("?");
        index++;
        stack.push({ pathname, search });
        states.push(state);
      },
      replaceState(state, _, uri) {
        const [pathname, search = ""] = uri.split("?");
        stack[index] = { pathname, search };
        states[index] = state;
      }
    }
  };
}
var canUseDOM = Boolean(
  typeof window !== "undefined" && window.document && window.document.createElement
);
var globalHistory = createHistory(canUseDOM ? window : createMemorySource());
var { navigate } = globalHistory;

// node_modules/svelte-routing/src/utils.js
var paramRe = /^:(.+)/;
var SEGMENT_POINTS = 4;
var STATIC_POINTS = 3;
var DYNAMIC_POINTS = 2;
var SPLAT_PENALTY = 1;
var ROOT_POINTS = 1;
function startsWith(string, search) {
  return string.substr(0, search.length) === search;
}
function isRootSegment(segment) {
  return segment === "";
}
function isDynamic(segment) {
  return paramRe.test(segment);
}
function isSplat(segment) {
  return segment[0] === "*";
}
function segmentize(uri) {
  return uri.replace(/(^\/+|\/+$)/g, "").split("/");
}
function stripSlashes(str) {
  return str.replace(/(^\/+|\/+$)/g, "");
}
function rankRoute(route, index) {
  const score = route.default ? 0 : segmentize(route.path).reduce((score2, segment) => {
    score2 += SEGMENT_POINTS;
    if (isRootSegment(segment)) {
      score2 += ROOT_POINTS;
    } else if (isDynamic(segment)) {
      score2 += DYNAMIC_POINTS;
    } else if (isSplat(segment)) {
      score2 -= SEGMENT_POINTS + SPLAT_PENALTY;
    } else {
      score2 += STATIC_POINTS;
    }
    return score2;
  }, 0);
  return { route, score, index };
}
function rankRoutes(routes) {
  return routes.map(rankRoute).sort(
    (a, b) => a.score < b.score ? 1 : a.score > b.score ? -1 : a.index - b.index
  );
}
function pick(routes, uri) {
  let match2;
  let default_;
  const [uriPathname] = uri.split("?");
  const uriSegments = segmentize(uriPathname);
  const isRootUri = uriSegments[0] === "";
  const ranked = rankRoutes(routes);
  for (let i = 0, l = ranked.length; i < l; i++) {
    const route = ranked[i].route;
    let missed = false;
    if (route.default) {
      default_ = {
        route,
        params: {},
        uri
      };
      continue;
    }
    const routeSegments = segmentize(route.path);
    const params = {};
    const max = Math.max(uriSegments.length, routeSegments.length);
    let index = 0;
    for (; index < max; index++) {
      const routeSegment = routeSegments[index];
      const uriSegment = uriSegments[index];
      if (routeSegment !== void 0 && isSplat(routeSegment)) {
        const splatName = routeSegment === "*" ? "*" : routeSegment.slice(1);
        params[splatName] = uriSegments.slice(index).map(decodeURIComponent).join("/");
        break;
      }
      if (uriSegment === void 0) {
        missed = true;
        break;
      }
      let dynamicMatch = paramRe.exec(routeSegment);
      if (dynamicMatch && !isRootUri) {
        const value = decodeURIComponent(uriSegment);
        params[dynamicMatch[1]] = value;
      } else if (routeSegment !== uriSegment) {
        missed = true;
        break;
      }
    }
    if (!missed) {
      match2 = {
        route,
        params,
        uri: "/" + uriSegments.slice(0, index).join("/")
      };
      break;
    }
  }
  return match2 || default_ || null;
}
function match(route, uri) {
  return pick([route], uri);
}
function addQuery(pathname, query) {
  return pathname + (query ? `?${query}` : "");
}
function resolve(to, base) {
  if (startsWith(to, "/")) {
    return to;
  }
  const [toPathname, toQuery] = to.split("?");
  const [basePathname] = base.split("?");
  const toSegments = segmentize(toPathname);
  const baseSegments = segmentize(basePathname);
  if (toSegments[0] === "") {
    return addQuery(basePathname, toQuery);
  }
  if (!startsWith(toSegments[0], ".")) {
    const pathname = baseSegments.concat(toSegments).join("/");
    return addQuery((basePathname === "/" ? "" : "/") + pathname, toQuery);
  }
  const allSegments = baseSegments.concat(toSegments);
  const segments = [];
  allSegments.forEach((segment) => {
    if (segment === "..") {
      segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return addQuery("/" + segments.join("/"), toQuery);
}
function combinePaths(basepath, path) {
  return `${stripSlashes(
    path === "/" ? basepath : `${stripSlashes(basepath)}/${stripSlashes(path)}`
  )}/`;
}
function shouldNavigate(event) {
  return !event.defaultPrevented && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function hostMatches(anchor) {
  const host = location.host;
  return anchor.host == host || // svelte seems to kill anchor.host value in ie11, so fall back to checking href
  anchor.href.indexOf(`https://${host}`) === 0 || anchor.href.indexOf(`http://${host}`) === 0;
}

// node_modules/svelte-routing/src/Router.svelte
function create_fragment(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[9].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[8],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        256)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[8],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[8]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[8],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let $location;
  let $routes;
  let $base;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Router", slots, ["default"]);
  let { basepath = "/" } = $$props;
  let { url = null } = $$props;
  const locationContext = getContext(LOCATION);
  const routerContext = getContext(ROUTER);
  const routes = writable([]);
  validate_store(routes, "routes");
  component_subscribe($$self, routes, (value) => $$invalidate(6, $routes = value));
  const activeRoute = writable(null);
  let hasActiveRoute = false;
  const location2 = locationContext || writable(url ? { pathname: url } : globalHistory.location);
  validate_store(location2, "location");
  component_subscribe($$self, location2, (value) => $$invalidate(5, $location = value));
  const base = routerContext ? routerContext.routerBase : writable({ path: basepath, uri: basepath });
  validate_store(base, "base");
  component_subscribe($$self, base, (value) => $$invalidate(7, $base = value));
  const routerBase = derived([base, activeRoute], ([base2, activeRoute2]) => {
    if (activeRoute2 === null) {
      return base2;
    }
    const { path: basepath2 } = base2;
    const { route, uri } = activeRoute2;
    const path = route.default ? basepath2 : route.path.replace(/\*.*$/, "");
    return { path, uri };
  });
  function registerRoute(route) {
    const { path: basepath2 } = $base;
    let { path } = route;
    route._path = path;
    route.path = combinePaths(basepath2, path);
    if (typeof window === "undefined") {
      if (hasActiveRoute) {
        return;
      }
      const matchingRoute = match(route, $location.pathname);
      if (matchingRoute) {
        activeRoute.set(matchingRoute);
        hasActiveRoute = true;
      }
    } else {
      routes.update((rs) => {
        rs.push(route);
        return rs;
      });
    }
  }
  function unregisterRoute(route) {
    routes.update((rs) => {
      const index = rs.indexOf(route);
      rs.splice(index, 1);
      return rs;
    });
  }
  if (!locationContext) {
    onMount(() => {
      const unlisten = globalHistory.listen((history) => {
        location2.set(history.location);
      });
      return unlisten;
    });
    setContext(LOCATION, location2);
  }
  setContext(ROUTER, {
    activeRoute,
    base,
    routerBase,
    registerRoute,
    unregisterRoute
  });
  const writable_props = ["basepath", "url"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Router> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("basepath" in $$props2)
      $$invalidate(3, basepath = $$props2.basepath);
    if ("url" in $$props2)
      $$invalidate(4, url = $$props2.url);
    if ("$$scope" in $$props2)
      $$invalidate(8, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    setContext,
    onMount,
    writable,
    derived,
    LOCATION,
    ROUTER,
    globalHistory,
    pick,
    match,
    stripSlashes,
    combinePaths,
    basepath,
    url,
    locationContext,
    routerContext,
    routes,
    activeRoute,
    hasActiveRoute,
    location: location2,
    base,
    routerBase,
    registerRoute,
    unregisterRoute,
    $location,
    $routes,
    $base
  });
  $$self.$inject_state = ($$props2) => {
    if ("basepath" in $$props2)
      $$invalidate(3, basepath = $$props2.basepath);
    if ("url" in $$props2)
      $$invalidate(4, url = $$props2.url);
    if ("hasActiveRoute" in $$props2)
      hasActiveRoute = $$props2.hasActiveRoute;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$base*/
    128) {
      $: {
        const { path: basepath2 } = $base;
        routes.update((rs) => {
          rs.forEach((r) => r.path = combinePaths(basepath2, r._path));
          return rs;
        });
      }
    }
    if ($$self.$$.dirty & /*$routes, $location*/
    96) {
      $: {
        const bestMatch = pick($routes, $location.pathname);
        activeRoute.set(bestMatch);
      }
    }
  };
  return [
    routes,
    location2,
    base,
    basepath,
    url,
    $location,
    $routes,
    $base,
    $$scope,
    slots
  ];
}
var Router = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { basepath: 3, url: 4 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Router",
      options,
      id: create_fragment.name
    });
  }
  get basepath() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set basepath(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get url() {
    throw new Error("<Router>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set url(value) {
    throw new Error("<Router>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Router_default = Router;

// node_modules/svelte-routing/src/Route.svelte
var get_default_slot_changes = (dirty) => ({
  params: dirty & /*routeParams*/
  4,
  location: dirty & /*$location*/
  16
});
var get_default_slot_context = (ctx) => ({
  params: (
    /*routeParams*/
    ctx[2]
  ),
  location: (
    /*$location*/
    ctx[4]
  )
});
function create_if_block(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_1, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*component*/
      ctx2[0] !== null
    )
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(40:0) {#if $activeRoute !== null && $activeRoute.route === route}",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[10].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[9],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, routeParams, $location*/
        532)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[9],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[9]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[9],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(43:2) {:else}",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let switch_instance;
  let switch_instance_anchor;
  let current;
  const switch_instance_spread_levels = [
    { location: (
      /*$location*/
      ctx[4]
    ) },
    /*routeParams*/
    ctx[2],
    /*routeProps*/
    ctx[3]
  ];
  var switch_value = (
    /*component*/
    ctx[0]
  );
  function switch_props(ctx2) {
    let switch_instance_props = {};
    for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
      switch_instance_props = assign(switch_instance_props, switch_instance_spread_levels[i]);
    }
    return {
      props: switch_instance_props,
      $$inline: true
    };
  }
  if (switch_value) {
    switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx));
  }
  const block = {
    c: function create() {
      if (switch_instance)
        create_component(switch_instance.$$.fragment);
      switch_instance_anchor = empty();
    },
    m: function mount(target, anchor) {
      if (switch_instance)
        mount_component(switch_instance, target, anchor);
      insert_dev(target, switch_instance_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, dirty) {
      const switch_instance_changes = dirty & /*$location, routeParams, routeProps*/
      28 ? get_spread_update(switch_instance_spread_levels, [
        dirty & /*$location*/
        16 && { location: (
          /*$location*/
          ctx2[4]
        ) },
        dirty & /*routeParams*/
        4 && get_spread_object(
          /*routeParams*/
          ctx2[2]
        ),
        dirty & /*routeProps*/
        8 && get_spread_object(
          /*routeProps*/
          ctx2[3]
        )
      ]) : {};
      if (switch_value !== (switch_value = /*component*/
      ctx2[0])) {
        if (switch_instance) {
          group_outros();
          const old_component = switch_instance;
          transition_out(old_component.$$.fragment, 1, 0, () => {
            destroy_component(old_component, 1);
          });
          check_outros();
        }
        if (switch_value) {
          switch_instance = construct_svelte_component_dev(switch_value, switch_props(ctx2));
          create_component(switch_instance.$$.fragment);
          transition_in(switch_instance.$$.fragment, 1);
          mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
        } else {
          switch_instance = null;
        }
      } else if (switch_value) {
        switch_instance.$set(switch_instance_changes);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      if (switch_instance)
        transition_in(switch_instance.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      if (switch_instance)
        transition_out(switch_instance.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(switch_instance_anchor);
      if (switch_instance)
        destroy_component(switch_instance, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(41:2) {#if component !== null}",
    ctx
  });
  return block;
}
function create_fragment2(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (
    /*$activeRoute*/
    ctx[1] !== null && /*$activeRoute*/
    ctx[1].route === /*route*/
    ctx[7] && create_if_block(ctx)
  );
  const block = {
    c: function create() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (
        /*$activeRoute*/
        ctx2[1] !== null && /*$activeRoute*/
        ctx2[1].route === /*route*/
        ctx2[7]
      ) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & /*$activeRoute*/
          2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach_dev(if_block_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let $activeRoute;
  let $location;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Route", slots, ["default"]);
  let { path = "" } = $$props;
  let { component = null } = $$props;
  const { registerRoute, unregisterRoute, activeRoute } = getContext(ROUTER);
  validate_store(activeRoute, "activeRoute");
  component_subscribe($$self, activeRoute, (value) => $$invalidate(1, $activeRoute = value));
  const location2 = getContext(LOCATION);
  validate_store(location2, "location");
  component_subscribe($$self, location2, (value) => $$invalidate(4, $location = value));
  const route = {
    path,
    // If no path prop is given, this Route will act as the default Route
    // that is rendered if no other Route in the Router is a match.
    default: path === ""
  };
  let routeParams = {};
  let routeProps = {};
  registerRoute(route);
  if (typeof window !== "undefined") {
    onDestroy(() => {
      unregisterRoute(route);
    });
  }
  $$self.$$set = ($$new_props) => {
    $$invalidate(13, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
    if ("path" in $$new_props)
      $$invalidate(8, path = $$new_props.path);
    if ("component" in $$new_props)
      $$invalidate(0, component = $$new_props.component);
    if ("$$scope" in $$new_props)
      $$invalidate(9, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    onDestroy,
    ROUTER,
    LOCATION,
    path,
    component,
    registerRoute,
    unregisterRoute,
    activeRoute,
    location: location2,
    route,
    routeParams,
    routeProps,
    $activeRoute,
    $location
  });
  $$self.$inject_state = ($$new_props) => {
    $$invalidate(13, $$props = assign(assign({}, $$props), $$new_props));
    if ("path" in $$props)
      $$invalidate(8, path = $$new_props.path);
    if ("component" in $$props)
      $$invalidate(0, component = $$new_props.component);
    if ("routeParams" in $$props)
      $$invalidate(2, routeParams = $$new_props.routeParams);
    if ("routeProps" in $$props)
      $$invalidate(3, routeProps = $$new_props.routeProps);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*$activeRoute*/
    2) {
      $:
        if ($activeRoute && $activeRoute.route === route) {
          $$invalidate(2, routeParams = $activeRoute.params);
        }
    }
    $: {
      const { path: path2, component: component2, ...rest } = $$props;
      $$invalidate(3, routeProps = rest);
    }
  };
  $$props = exclude_internal_props($$props);
  return [
    component,
    $activeRoute,
    routeParams,
    routeProps,
    $location,
    activeRoute,
    location2,
    route,
    path,
    $$scope,
    slots
  ];
}
var Route = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { path: 8, component: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Route",
      options,
      id: create_fragment2.name
    });
  }
  get path() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set path(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get component() {
    throw new Error("<Route>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set component(value) {
    throw new Error("<Route>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Route_default = Route;

// node_modules/svelte-routing/src/Link.svelte
var file = "node_modules/svelte-routing/src/Link.svelte";
function create_fragment3(ctx) {
  let a;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = (
    /*#slots*/
    ctx[16].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[15],
    null
  );
  let a_levels = [
    { href: (
      /*href*/
      ctx[0]
    ) },
    { "aria-current": (
      /*ariaCurrent*/
      ctx[2]
    ) },
    /*props*/
    ctx[1],
    /*$$restProps*/
    ctx[6]
  ];
  let a_data = {};
  for (let i = 0; i < a_levels.length; i += 1) {
    a_data = assign(a_data, a_levels[i]);
  }
  const block = {
    c: function create() {
      a = element("a");
      if (default_slot)
        default_slot.c();
      set_attributes(a, a_data);
      add_location(a, file, 40, 0, 1249);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, a, anchor);
      if (default_slot) {
        default_slot.m(a, null);
      }
      current = true;
      if (!mounted) {
        dispose = listen_dev(
          a,
          "click",
          /*onClick*/
          ctx[5],
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        32768)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[15],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[15]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[15],
              dirty,
              null
            ),
            null
          );
        }
      }
      set_attributes(a, a_data = get_spread_update(a_levels, [
        (!current || dirty & /*href*/
        1) && { href: (
          /*href*/
          ctx2[0]
        ) },
        (!current || dirty & /*ariaCurrent*/
        4) && { "aria-current": (
          /*ariaCurrent*/
          ctx2[2]
        ) },
        dirty & /*props*/
        2 && /*props*/
        ctx2[1],
        dirty & /*$$restProps*/
        64 && /*$$restProps*/
        ctx2[6]
      ]));
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(a);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let ariaCurrent;
  const omit_props_names = ["to", "replace", "state", "getProps"];
  let $$restProps = compute_rest_props($$props, omit_props_names);
  let $location;
  let $base;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Link", slots, ["default"]);
  let { to = "#" } = $$props;
  let { replace = false } = $$props;
  let { state = {} } = $$props;
  let { getProps = () => ({}) } = $$props;
  const { base } = getContext(ROUTER);
  validate_store(base, "base");
  component_subscribe($$self, base, (value) => $$invalidate(14, $base = value));
  const location2 = getContext(LOCATION);
  validate_store(location2, "location");
  component_subscribe($$self, location2, (value) => $$invalidate(13, $location = value));
  const dispatch = createEventDispatcher();
  let href, isPartiallyCurrent, isCurrent, props;
  function onClick(event) {
    dispatch("click", event);
    if (shouldNavigate(event)) {
      event.preventDefault();
      const shouldReplace = $location.pathname === href || replace;
      navigate(href, { state, replace: shouldReplace });
    }
  }
  $$self.$$set = ($$new_props) => {
    $$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
    $$invalidate(6, $$restProps = compute_rest_props($$props, omit_props_names));
    if ("to" in $$new_props)
      $$invalidate(7, to = $$new_props.to);
    if ("replace" in $$new_props)
      $$invalidate(8, replace = $$new_props.replace);
    if ("state" in $$new_props)
      $$invalidate(9, state = $$new_props.state);
    if ("getProps" in $$new_props)
      $$invalidate(10, getProps = $$new_props.getProps);
    if ("$$scope" in $$new_props)
      $$invalidate(15, $$scope = $$new_props.$$scope);
  };
  $$self.$capture_state = () => ({
    getContext,
    createEventDispatcher,
    ROUTER,
    LOCATION,
    navigate,
    startsWith,
    resolve,
    shouldNavigate,
    to,
    replace,
    state,
    getProps,
    base,
    location: location2,
    dispatch,
    href,
    isPartiallyCurrent,
    isCurrent,
    props,
    onClick,
    ariaCurrent,
    $location,
    $base
  });
  $$self.$inject_state = ($$new_props) => {
    if ("to" in $$props)
      $$invalidate(7, to = $$new_props.to);
    if ("replace" in $$props)
      $$invalidate(8, replace = $$new_props.replace);
    if ("state" in $$props)
      $$invalidate(9, state = $$new_props.state);
    if ("getProps" in $$props)
      $$invalidate(10, getProps = $$new_props.getProps);
    if ("href" in $$props)
      $$invalidate(0, href = $$new_props.href);
    if ("isPartiallyCurrent" in $$props)
      $$invalidate(11, isPartiallyCurrent = $$new_props.isPartiallyCurrent);
    if ("isCurrent" in $$props)
      $$invalidate(12, isCurrent = $$new_props.isCurrent);
    if ("props" in $$props)
      $$invalidate(1, props = $$new_props.props);
    if ("ariaCurrent" in $$props)
      $$invalidate(2, ariaCurrent = $$new_props.ariaCurrent);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*to, $base*/
    16512) {
      $:
        $$invalidate(0, href = to === "/" ? $base.uri : resolve(to, $base.uri));
    }
    if ($$self.$$.dirty & /*$location, href*/
    8193) {
      $:
        $$invalidate(11, isPartiallyCurrent = startsWith($location.pathname, href));
    }
    if ($$self.$$.dirty & /*href, $location*/
    8193) {
      $:
        $$invalidate(12, isCurrent = href === $location.pathname);
    }
    if ($$self.$$.dirty & /*isCurrent*/
    4096) {
      $:
        $$invalidate(2, ariaCurrent = isCurrent ? "page" : void 0);
    }
    if ($$self.$$.dirty & /*getProps, $location, href, isPartiallyCurrent, isCurrent*/
    15361) {
      $:
        $$invalidate(1, props = getProps({
          location: $location,
          href,
          isPartiallyCurrent,
          isCurrent
        }));
    }
  };
  return [
    href,
    props,
    ariaCurrent,
    base,
    location2,
    onClick,
    $$restProps,
    to,
    replace,
    state,
    getProps,
    isPartiallyCurrent,
    isCurrent,
    $location,
    $base,
    $$scope,
    slots
  ];
}
var Link = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, {
      to: 7,
      replace: 8,
      state: 9,
      getProps: 10
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Link",
      options,
      id: create_fragment3.name
    });
  }
  get to() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set to(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get replace() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set replace(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get state() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set state(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getProps() {
    throw new Error("<Link>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set getProps(value) {
    throw new Error("<Link>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Link_default = Link;

// node_modules/svelte-routing/src/actions.js
function link(node) {
  function onClick(event) {
    const anchor = event.currentTarget;
    if (anchor.target === "" && hostMatches(anchor) && shouldNavigate(event)) {
      event.preventDefault();
      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
    }
  }
  node.addEventListener("click", onClick);
  return {
    destroy() {
      node.removeEventListener("click", onClick);
    }
  };
}
function links(node) {
  function findClosest(tagName, el) {
    while (el && el.tagName !== tagName) {
      el = el.parentNode;
    }
    return el;
  }
  function onClick(event) {
    const anchor = findClosest("A", event.target);
    if (anchor && anchor.target === "" && hostMatches(anchor) && shouldNavigate(event) && !anchor.hasAttribute("noroute")) {
      event.preventDefault();
      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
    }
  }
  node.addEventListener("click", onClick);
  return {
    destroy() {
      node.removeEventListener("click", onClick);
    }
  };
}
export {
  Link_default as Link,
  Route_default as Route,
  Router_default as Router,
  link,
  links,
  navigate
};
//# sourceMappingURL=svelte-routing.js.map
