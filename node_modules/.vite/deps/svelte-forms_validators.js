import {
  isPromise
} from "./chunk-UCOEKEID.js";
import "./chunk-DY7FSUYH.js";
import {
  get_store_value
} from "./chunk-K6MJRMI7.js";

// node_modules/svelte-forms/validators/between.js
function between(min2, max2) {
  return (value) => {
    const val = isNaN(value) ? value.length : parseFloat(value);
    return { valid: val >= min2 && val <= max2, name: "between" };
  };
}

// node_modules/svelte-forms/validators/email.js
function email() {
  return (value) => {
    const regex = /^[a-zA-Z0-9_+&*-]+(?:\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,7}$/;
    return { valid: Boolean(value) && regex.test(value), name: "not_an_email" };
  };
}

// node_modules/svelte-forms/validators/max.js
function max(n) {
  return (value) => {
    const val = typeof value === "string" ? value.length : isNaN(value) ? 0 : parseFloat(value);
    return { valid: val <= n, name: "max" };
  };
}

// node_modules/svelte-forms/validators/min.js
function min(n) {
  return (value) => {
    const val = isNaN(value) ? value.length : parseFloat(value);
    return { valid: val >= n, name: "min" };
  };
}

// node_modules/svelte-forms/validators/required.js
function required() {
  return (val) => {
    let valid = true;
    if (val === void 0 || val === null)
      valid = false;
    if (typeof val === "string") {
      const tmp = val.replace(/\s/g, "");
      valid = tmp.length > 0;
    }
    return { valid, name: "required" };
  };
}

// node_modules/svelte-forms/validators/url.js
function url() {
  const regex = /(https?|ftp|git|svn):\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-z]{2,63}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/i;
  return (value) => ({ valid: regex.test(value), name: "url" });
}

// node_modules/svelte-forms/validators/matchField.js
function matchField(store) {
  return (value) => {
    return { valid: get_store_value(store).value === value, name: "match_field" };
  };
}

// node_modules/svelte-forms/validators/not.js
function not(validation) {
  return async (value) => {
    const validator = validation(value);
    if (isPromise(validator)) {
      const result = await validator;
      return { valid: !result.valid, name: result.name };
    }
    return { valid: !validator.valid, name: validator.name };
  };
}

// node_modules/svelte-forms/validators/pattern.js
function pattern(pattern2) {
  return (value) => {
    if (value === null || value === void 0) {
      return { valid: false, name: "pattern" };
    }
    return { valid: pattern2.test(value), name: "pattern" };
  };
}
export {
  between,
  email,
  matchField,
  max,
  min,
  not,
  pattern,
  required,
  url
};
//# sourceMappingURL=svelte-forms_validators.js.map
