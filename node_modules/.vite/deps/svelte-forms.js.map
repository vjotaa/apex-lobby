{
  "version": 3,
  "sources": ["../../svelte-forms/form.js", "../../svelte-forms/types.js", "../../svelte-forms/createFieldStore.js", "../../svelte-forms/field.js", "../../svelte-forms/use.style.js", "../../svelte-forms/combined.js"],
  "sourcesContent": ["import { derived, get } from 'svelte/store';\r\nexport function form(...fields) {\r\n    let names = [];\r\n    let doubles = [];\r\n    fields.forEach((field) => {\r\n        const obj = get(field);\r\n        if (names.includes(obj.name)) {\r\n            doubles = doubles.includes(obj.name) ? doubles : [...doubles, obj.name];\r\n        }\r\n        else {\r\n            names = [...names, obj.name];\r\n        }\r\n    });\r\n    if (doubles.length) {\r\n        throw new Error(`Cannot have the fields with the same name: ${doubles.join(', ')}`);\r\n    }\r\n    const store = derived(fields, (values) => {\r\n        return {\r\n            valid: values.every((value) => value.valid),\r\n            dirty: values.some((value) => value.dirty),\r\n            // Summary as a getter to avoid useless computation of data\r\n            // if no one wants it\r\n            get summary() {\r\n                return values.reduce((carry, f) => {\r\n                    carry[f.name] = f.value;\r\n                    return carry;\r\n                }, {});\r\n            },\r\n            errors: values\r\n                .map((value) => {\r\n                return value.errors.map((e) => {\r\n                    if (e.includes('.')) {\r\n                        return e;\r\n                    }\r\n                    return `${value.name}.${e}`;\r\n                });\r\n            })\r\n                .flat()\r\n                .filter((value, index, self) => self.indexOf(value) === index),\r\n            hasError(name) {\r\n                return this.errors.findIndex((e) => e === name) !== -1;\r\n            }\r\n        };\r\n    });\r\n    const { subscribe } = store;\r\n    function reset() {\r\n        fields.forEach((field) => field.reset && field.reset());\r\n    }\r\n    function clear() {\r\n        fields.forEach((field) => field.clear && field.clear());\r\n    }\r\n    async function validate() {\r\n        for (const field of fields) {\r\n            if (field.validate)\r\n                await field.validate();\r\n        }\r\n    }\r\n    function getField(name) {\r\n        return fields.find((f) => get(f).name === name);\r\n    }\r\n    function summary() {\r\n        return get(store).summary;\r\n    }\r\n    return { subscribe, reset, validate, getField, summary, clear };\r\n}\r\n", "export const defaultFieldOptions = {\r\n    valid: true,\r\n    checkOnInit: false,\r\n    validateOnChange: true,\r\n    stopAtFirstError: false\r\n};\r\nexport function isField(field) {\r\n    const keys = Object.keys(field);\r\n    return ['name', 'value', 'valid', 'invalid', 'errors'].every((key) => keys.includes(key));\r\n}\r\n", "import isPromise from 'is-promise';\r\nimport { writable, get } from 'svelte/store';\r\nimport { isField } from './types.js';\r\nexport function createFieldOject(name, value, errors = [], partialField = {}) {\r\n    const field = {\r\n        name,\r\n        value,\r\n        valid: true,\r\n        invalid: false,\r\n        errors: [],\r\n        dirty: false\r\n    };\r\n    return processField(field, errors, partialField);\r\n}\r\nexport function getValue(value) {\r\n    const isStore = function (v) {\r\n        return value.subscribe !== undefined;\r\n    };\r\n    const isField = function (v) {\r\n        return !!value.name && value.valid !== undefined;\r\n    };\r\n    if (isStore(value)) {\r\n        return get(value).value;\r\n    }\r\n    else if (isField(value)) {\r\n        return value.value;\r\n    }\r\n    return value;\r\n}\r\nexport async function getErrors(value, validators, stopAtFirstError = false) {\r\n    const v = getValue(value);\r\n    let errors = [];\r\n    for (const validator of validators) {\r\n        let result = validator(v);\r\n        if (isPromise(result)) {\r\n            result = await result;\r\n        }\r\n        if (stopAtFirstError && !result.valid) {\r\n            errors = [result];\r\n            break;\r\n        }\r\n        errors = [...errors, result];\r\n    }\r\n    return errors;\r\n}\r\nexport function processField(field, validations, partialField = {}) {\r\n    if (validations) {\r\n        const errors = validations.filter((v) => !v.valid).map((v) => v.name);\r\n        const valid = !errors.length;\r\n        return { ...field, valid: valid, invalid: !valid, errors, ...partialField };\r\n        // return { ...field, dirty: field.dirty || !!validations.length, valid, invalid: !valid, errors, ...partialField };\r\n    }\r\n    return field;\r\n}\r\nexport function createFieldStore(name, v, validators = [], options) {\r\n    const value = {\r\n        name,\r\n        value: v,\r\n        valid: options.valid,\r\n        invalid: !options.valid,\r\n        dirty: false,\r\n        errors: []\r\n    };\r\n    const store = writable(value);\r\n    const { subscribe, update, set: _set } = store;\r\n    async function set(field, forceValidation = false) {\r\n        if (!isField(field)) {\r\n            field = processField(get(store), [], { value: field });\r\n        }\r\n        if (forceValidation || options.validateOnChange) {\r\n            let validations = await getErrors(field, validators, options.stopAtFirstError);\r\n            _set(processField(field, validations, { dirty: true }));\r\n        }\r\n        else {\r\n            _set(processField(field, null, { dirty: true }));\r\n        }\r\n    }\r\n    async function validate() {\r\n        const errors = await getErrors(store, validators, options.stopAtFirstError);\r\n        let obj;\r\n        update((field) => {\r\n            obj = processField(field, errors, { dirty: false });\r\n            return obj;\r\n        });\r\n        return obj;\r\n    }\r\n    function reset() {\r\n        _set(processField({\r\n            dirty: false,\r\n            errors: [],\r\n            name,\r\n            valid: options.valid,\r\n            invalid: !options.valid,\r\n            value: v\r\n        }));\r\n    }\r\n    if (options.checkOnInit) {\r\n        set(value);\r\n    }\r\n    function clear() {\r\n        _set(processField({\r\n            dirty: false,\r\n            errors: [],\r\n            name,\r\n            valid: options.valid,\r\n            invalid: !options.valid,\r\n            value: null\r\n        }));\r\n    }\r\n    return { subscribe, update, set, validate, reset, clear };\r\n}\r\n", "import { createFieldStore } from './createFieldStore.js';\r\nimport { defaultFieldOptions } from './types.js';\r\nexport function field(name, value, validators = [], options = {}) {\r\n    return createFieldStore(name, value, validators, { ...defaultFieldOptions, ...options });\r\n}\r\n", "export function style(node, { field = null, valid = 'valid', invalid = 'invalid', dirty = 'dirty' } = {}) {\r\n    const unsubscribe = field.subscribe((field) => {\r\n        if (field.dirty) {\r\n            node.classList.add(dirty);\r\n            if (field.valid) {\r\n                node.classList.add(valid);\r\n                node.classList.remove(invalid);\r\n            }\r\n            else {\r\n                node.classList.add(invalid);\r\n                node.classList.remove(valid);\r\n            }\r\n        }\r\n        else {\r\n            node.classList.remove(dirty);\r\n        }\r\n    });\r\n    return {\r\n        destroy: () => unsubscribe()\r\n    };\r\n}\r\n", "import { get } from 'svelte/store';\r\nimport { derived } from 'svelte/store';\r\nimport { createFieldOject, getErrors } from './createFieldStore.js';\r\nimport { defaultFieldOptions } from './types.js';\r\nexport function combined(name, fields, reducer, validators = [], options = defaultFieldOptions) {\r\n    let resolve;\r\n    const { subscribe } = derived(fields, (values, set) => {\r\n        const value = reducer(values);\r\n        const createValidations = () => {\r\n            let errors = [];\r\n            values.forEach((value) => {\r\n                errors = [\r\n                    ...errors,\r\n                    ...value.errors\r\n                        .map((e) => {\r\n                        return { valid: false, name: `${value.name}.${e}` };\r\n                    })\r\n                        .flat()\r\n                ];\r\n            });\r\n            return errors;\r\n        };\r\n        const validations = createValidations();\r\n        resolve = getErrors(value, validators, options.stopAtFirstError).then((combinedValidations) => {\r\n            const obj = createFieldOject(name, value, [...combinedValidations, ...validations], {\r\n                dirty: values.some((v) => v.dirty)\r\n            });\r\n            set(obj);\r\n            return obj;\r\n        });\r\n        set(createFieldOject(name, value, validations, {\r\n            dirty: values.some((v) => v.dirty)\r\n        }));\r\n    }, createFieldOject(name, reducer(fields.map((f) => get(f))), []));\r\n    return {\r\n        subscribe,\r\n        validate: async () => {\r\n            return resolve;\r\n        }\r\n    };\r\n}\r\n"],
  "mappings": "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",
  "names": ["field", "field", "field", "isField", "field", "value"]
}
